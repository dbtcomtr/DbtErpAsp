@using Deneme_proje.Controllers

@model List<Deneme_proje.Models.AktarimEntities.StockMovement>

<!-- CSS Bağlantıları -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet" />
<link href="~/content/assets/css/bahcepinar.css" rel="stylesheet" />

<style>
    :root {
        --primary: #2563eb; /* Soft blue */
        --background: #ffffff; /* White */
        --text: #1f2a44; /* Dark gray */
        --border: #e5e7eb; /* Light gray */
        --error: #dc2626; /* Soft red */
        --success: #16a34a; /* Soft green */
    }


  

    .main-content {
        padding: 15px;
      
    }

    .card {
        background: var(--background);
        border: 1px solid var(--border);
        border-radius: 8px;
        margin-bottom: 24px;
        overflow: hidden;
    }

    .card-header {
        background: var(--primary);
        color: #fff;
        padding: 12px 16px;
        font-size: 16px;
        font-weight: 500;
    }

    .form-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 16px;
        padding: 3rem 3rem 0 3rem;
    }

    input, select {
        padding: 6px !important;
        border-radius: 4px !important;
        border: 1px solid var(--border);
        font-size: 13px !important;
        background: #fafafa;
    }
    .form-group {
        display: flex;
        flex-direction: column;
    }

    label {
        font-size: 14px;
        font-weight: 500;
        margin-bottom: 6px;
        color: var(--text);
    }

    input, select {
        padding: 10px;
        border-radius: 6px;
        border: 1px solid var(--border);
        font-size: 14px;
        background: #fafafa;
    }

        input:focus, select:focus {
            outline: none;
            border-color: var(--primary);
        }

    .buttons-section {
        padding: 16px;
        display: flex;
        gap: 8px;
    }

    .aktarimbtn {
        background: var(--primary);
        color: #fff;
        border: none;
        padding: 10px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
    }

        .aktarimbtn:hover {
            background: #1d4ed8;
        }

    .grid-container {
        overflow-x: auto;
        padding: 16px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    thead {
        background: #f3f4f6;
        color: var(--text);
    }

    th, td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid var(--border);
        font-size: 14px;
    }

    tbody tr:hover {
        background: #f9fafb;
    }

    /* Toast Notification */
    .toast-notification {
        position: fixed;
        top: 7%;
        right: 0px;
        padding: 10px 15px;
        border-radius: 0px;
        display: flex;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s;
    }

    .toast-success {
        background: var(--success);
        color: #fff;
    }

    .toast-error {
        background: var(--error);
        color: #fff;
    }

    .toast-icon {
        margin-right: 8px;
    }

    .toast-message {
        font-size: 14px;
    }

    .toast-visible {
        opacity: 1;
    }

    .tablo {
        background: var(--primary);
        color: #fff;
        padding: 5px 16px;
        font-size: 14px;
        font-weight: 500;
    }
    /* Responsive Design */
    @@media (max-width: 768px) {
        .form-section {
            grid-template-columns: 1fr;
        }

        .buttons-section {
            flex-direction: column;
        }

        .aktarimbtn {
            width: 100%;
            text-align: center;
        }
    }
</style>
<div class="main-content mt-5">
    <div class="px-lg-5 px-3">



    <div class="card">
        <div class="form-section">
            <!-- Ürün Kodu -->
            <div class="form-group">
                <label for="urun-kodu">Ürün Kodu</label>
                <input type="text" id="urun-kodu" name="urunKodu" value="@(TempData["UrunKodu"]?.ToString() ?? "")" />
            </div>
            <!-- Ürün Giriş Depo -->
            <div class="form-group">
                <label for="giris-depo">Ürün Giriş Depo</label>
                <select id="giris-depo" name="girisDep">
                    <option value="">Seçiniz</option>
                    @foreach (var depo in ViewBag.Depolar ?? new List<Deneme_proje.Models.Entities.Depo>())
                    {
                        <option value="@depo.DepoNo" @@(TempData["GirisDepo"]?.ToString()= =depo.DepoNo.ToString() ? "selected" : "" )>@depo.DepoAdi</option>
                    }
                </select>
            </div>
            <!-- Hammadde Çıkış Depo -->
            <div class="form-group">
                <label for="cikis-depo">Hammadde Çıkış Depo</label>
                <select id="cikis-depo" name="cikisDep">
                    <option value="">Seçiniz</option>
                    @foreach (var depo in ViewBag.Depolar ?? new List<Deneme_proje.Models.Entities.Depo>())
                    {
                        <option value="@depo.DepoNo" @@(TempData["CikisDepo"]?.ToString()= =depo.DepoNo.ToString() ? "selected" : "" )>@depo.DepoAdi</option>
                    }
                </select>
            </div>
            <!-- Miktar -->
            <div class="form-group">
                <label for="miktar">Miktar</label>
                <input type="text" id="miktar" name="miktar" value="@(TempData["Miktar"]?.ToString() ?? "")" />
            </div>
            <!-- Srm Merkezi -->
            <div class="form-group">
                <label for="srm-merkezi">Srm Merkezi</label>
                <select id="srm-merkezi" name="srmMerkezi">
                    <option value="">Seçiniz</option>
                    @foreach (var sorumlu in ViewBag.SorumluKodlari ?? new List<Deneme_proje.Models.Entities.SorumluKod>())
                    {
                        <option value="@sorumlu.SorumluKodu" @@(TempData["SrmMerkezi"]?.ToString()= =sorumlu.SorumluKodu.ToString() ? "selected" : "" )>@sorumlu.SorumluAdi</option>
                    }
                </select>
            </div>
            <!-- Tarih -->
            <div class="form-group">
                <label for="tarih">Tarih</label>
                <input type="date" id="tarih" name="tarih" value="@(TempData["Tarih"]?.ToString() ?? DateTime.Now.ToString("yyyy-MM-dd"))" />
            </div>
            <!-- Parametre -->
            <div class="form-group">
                <label for="selectedParametre">Parametre</label>
                <select id="selectedParametre" name="selectedParametre">
                    <option value="">Parametre Seçiniz</option>
                    @foreach (var param in ViewBag.Parametreler ?? new List<ParametreModel>())
                    {
                        <option value="@param.ParametreAdi" @@(ViewBag.SelectedParametre == param.ParametreAdi || TempData["SelectedParametre"]?.ToString() == param.ParametreAdi ? "selected" : "")>@param.ParametreAdi</option>
                    }
                </select>
            </div>
        </div>

        <form id="listeleForm" asp-controller="Aktarim" asp-action="Index" method="post" enctype="multipart/form-data" style="padding: 16px;">
            <div class="buttons-section">
                <input type="file" name="excelFile" style="flex-grow: 1;" />
                <input type="hidden" name="selectedParametre" id="hiddenSelectedParametre" />
                <input type="hidden" name="urunKodu" id="formUrunKodu" />
                <input type="hidden" name="girisDep" id="formGirisDepo" />
                <input type="hidden" name="cikisDep" id="formCikisDepo" />
                <input type="hidden" name="miktar" id="formMiktar" />
                <input type="hidden" name="srmMerkezi" id="formSrmMerkezi" />
                <input type="hidden" name="tarih" id="formTarih" />
                <button type="button" class="aktarimbtn" onclick="submitListeleForm()">Listele</button>
                <button type="button" class="aktarimbtn" onclick="aktarVerileri()">Aktar</button>
            </div>
        </form>

        <form id="aktarForm" asp-controller="Aktarim" asp-action="TablodanAktar" method="post">
            <input type="hidden" name="urunKodu" id="hiddenUrunKodu" />
            <input type="hidden" name="girisDep" id="hiddenGirisDep" />
            <input type="hidden" name="cikisDep" id="hiddenCikisDep" />
            <input type="hidden" name="miktar" id="hiddenMiktar" />
            <input type="hidden" name="srmMerkezi" id="hiddenSrmMerkezi" />
            <input type="hidden" name="tarih" id="hiddenTarih" />
            <div id="stokKodlariContainer"></div>
        </form>
    </div>

        @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
        {
            <div class="alert alert-success" style="background: #dcfce7; color: #166534; padding: 12px; border-radius: 6px; margin: 16px; display: flex; align-items: center;">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
                <span style="font-size: 14px;">@TempData["SuccessMessage"]</span>
            </div>
        }

        @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
        {
            <div class="alert alert-danger" style="background: #fee2e2; color: #991b1b; padding: 12px; border-radius: 6px; margin: 16px; display: flex; align-items: center;">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                <span style="font-size: 14px;">@TempData["ErrorMessage"]</span>
            </div>
        }
    <!-- Gruplanmış tablo alanı -->
    @foreach (var group in Model.GroupBy(x => x.Grup))
    {
        <div class="card">
            <div class="card-header tablo">@group.Key</div>
            <div class="grid-container">
                <table>
                    <thead>
                        <tr>
                            <th>Aktarılsın</th>
                            <th>Stok Kodu</th>
                            <th>Açıklama</th>
                            <th>Birim</th>
                            <th>Fiyat</th>
                            <th>Net</th>
                            <th>Brüt</th>
                            <th>Ağırlık</th>
                            <th>Net Tutar</th>
                            <th>Brüt Tutar</th>
                            <th>Para</th>
                            <th>Kur</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in group)
                        {
                            bool isChecked = true;
                            if (ViewBag.SecilenStokKodlari != null && ViewBag.SecilenStokKodlari.Contains(item.StokKodu))
                            {
                                isChecked = false;
                            }
                            <tr>
                                <td><input type="checkbox" class="stok-checkbox" @(isChecked ? "checked" : "") /></td>
                                <td>@item.StokKodu</td>
                                <td>@item.Aciklama</td>
                                <td>@item.Birim</td>
                                <td>@item.Fiyat</td>
                                <td>@item.Net</td>
                                <td>@item.Brut</td>
                                <td>@item.Agirlik</td>
                                <td>@item.NetTutar</td>
                                <td>@item.BrutTutar</td>
                                <td>@item.Para</td>
                                <td>@item.Kur</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    </div>
</div>

<script>
    // JavaScript remains unchanged to preserve functionality
    document.addEventListener('DOMContentLoaded', function() {
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage && successMessage.length > 0) {
            showToast(successMessage, 'success');
        }
        
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage && errorMessage.length > 0) {
            showToast(errorMessage, 'error');
        }
        
        saveFormValuesToLocalStorage();
        checkUrlParameters();
    });

    function checkUrlParameters() {
        const urlParams = new URLSearchParams(window.location.search);
        const selectedParametre = urlParams.get('selectedParametre');
        
        if (selectedParametre) {
            const selectElement = document.getElementById('selectedParametre');
            if (selectElement) {
                for (let i = 0; i < selectElement.options.length; i++) {
                    if (selectElement.options[i].value === selectedParametre) {
                        selectElement.selectedIndex = i;
                        break;
                    }
                }
            }
        }
    }

    function saveFormValuesToLocalStorage() {
        const formValues = {
            urunKodu: document.getElementById('urun-kodu').value,
            girisDepo: document.getElementById('giris-depo').value,
            cikisDepo: document.getElementById('cikis-depo').value,
            miktar: document.getElementById('miktar').value,
            srmMerkezi: document.getElementById('srm-merkezi').value,
            tarih: document.getElementById('tarih').value,
            selectedParametre: document.getElementById('selectedParametre').value
        };
        
        localStorage.setItem('aktarimFormValues', JSON.stringify(formValues));
    }

    function loadFormValuesFromLocalStorage() {
        const savedValues = localStorage.getItem('aktarimFormValues');
        if (savedValues) {
            const values = JSON.parse(savedValues);
            
            if (!document.getElementById('urun-kodu').value && values.urunKodu) {
                document.getElementById('urun-kodu').value = values.urunKodu;
            }
            
            if (!document.getElementById('giris-depo').value && values.girisDepo) {
                setSelectValue('giris-depo', values.girisDepo);
            }
            
            if (!document.getElementById('cikis-depo').value && values.cikisDepo) {
                setSelectValue('cikis-depo', values.cikisDepo);
            }
            
            if (!document.getElementById('miktar').value && values.miktar) {
                document.getElementById('miktar').value = values.miktar;
            }
            
            if (!document.getElementById('srm-merkezi').value && values.srmMerkezi) {
                setSelectValue('srm-merkezi', values.srmMerkezi);
            }
            
            if (!document.getElementById('tarih').value && values.tarih) {
                document.getElementById('tarih').value = values.tarih;
            }
            
            if (!document.getElementById('selectedParametre').value && values.selectedParametre) {
                setSelectValue('selectedParametre', values.selectedParametre);
            }
        }
    }

    function setSelectValue(elementId, value) {
        const selectElement = document.getElementById(elementId);
        if (selectElement) {
            for (let i = 0; i < selectElement.options.length; i++) {
                if (selectElement.options[i].value === value) {
                    selectElement.selectedIndex = i;
                    break;
                }
            }
        }
    }

    function submitListeleForm() {
        var selectedParametre = document.getElementById('selectedParametre').value;
        var urunKodu = document.getElementById('urun-kodu').value;
        var girisDepo = document.getElementById('giris-depo').value;
        var cikisDepo = document.getElementById('cikis-depo').value;
        var miktar = document.getElementById('miktar').value;
        var srmMerkezi = document.getElementById('srm-merkezi').value;
        var tarih = document.getElementById('tarih').value;
        
        document.getElementById('hiddenSelectedParametre').value = selectedParametre;
        document.getElementById('formUrunKodu').value = urunKodu;
        document.getElementById('formGirisDepo').value = girisDepo;
        document.getElementById('formCikisDepo').value = cikisDepo;
        document.getElementById('formMiktar').value = miktar;
        document.getElementById('formSrmMerkezi').value = srmMerkezi;
        document.getElementById('formTarih').value = tarih;
        
        saveFormValuesToLocalStorage();
        document.getElementById('listeleForm').submit();
    }

    function dosyaSec() {
        document.querySelector('input[name="excelFile"]').click();
    }

    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.innerHTML = `
            <div class="toast-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
            </div>
            <div class="toast-message">${message}</div>
        `;
        
        document.body.appendChild(toast);
        setTimeout(() => {
            toast.classList.add('toast-visible');
        }, 10);
        
        setTimeout(() => {
            toast.classList.remove('toast-visible');
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 2000);
    }

    function aktarVerileri() {
        var urunKodu = document.getElementById('urun-kodu').value;
        var girisDepo = document.getElementById('giris-depo').value;
        var cikisDepo = document.getElementById('cikis-depo').value;
        var miktar = document.getElementById('miktar').value;
        var srmMerkezi = document.getElementById('srm-merkezi').value;
        var tarih = document.getElementById('tarih').value;
        
        if (!urunKodu) {
            showToast('Ürün kodu boş olamaz!', 'error');
            return false;
        }
        
        if (!cikisDepo) {
            showToast('Hammadde Çıkış Depo seçilmelidir!', 'error');
            return false;
        }
        
        if (!miktar) {
            showToast('Miktar boş olamaz!', 'error');
            return false;
        }
        
        if (!tarih) {
            showToast('Tarih boş olamaz!', 'error');
            return false;
        }
        
        document.getElementById('hiddenUrunKodu').value = urunKodu;
        document.getElementById('hiddenGirisDep').value = girisDepo;
        document.getElementById('hiddenCikisDep').value = cikisDepo;
        document.getElementById('hiddenMiktar').value = miktar;
        document.getElementById('hiddenSrmMerkezi').value = srmMerkezi;
        document.getElementById('hiddenTarih').value = tarih;
        
        var checkboxes = document.querySelectorAll('.stok-checkbox:checked');
        var container = document.getElementById('stokKodlariContainer');
        container.innerHTML = '';
        
        if (checkboxes.length === 0) {
            showToast('Aktarılacak stok seçilmedi!', 'error');
            return false;
        }
        
        checkboxes.forEach(function(checkbox) {
            var row = checkbox.closest('tr');
            var stokKodu = row.cells[1].textContent.trim();
            var netMiktar = row.cells[5].textContent.trim().replace(/\s/g, '');
            
            var inputKod = document.createElement('input');
            inputKod.type = 'hidden';
            inputKod.name = 'stokKodlari';
            inputKod.value = stokKodu;
            container.appendChild(inputKod);
            
            var inputMiktar = document.createElement('input');
            inputMiktar.type = 'hidden';
            inputMiktar.name = 'netMiktarlar';
            inputMiktar.value = netMiktar;
            container.appendChild(inputMiktar);
        });
        
        saveFormValuesToLocalStorage();
        document.getElementById('aktarForm').submit();
        return true;
    }

    function filtreliAktar() {
        var allCheckboxes = document.querySelectorAll('.stok-checkbox');
        allCheckboxes.forEach(function(checkbox) {
            checkbox.checked = !checkbox.checked;
        });
        aktarVerileri();
    }

    window.addEventListener('load', loadFormValuesFromLocalStorage);
</script>