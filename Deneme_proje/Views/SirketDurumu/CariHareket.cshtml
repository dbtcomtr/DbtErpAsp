@model IEnumerable<Deneme_proje.Models.SirketDurumuEntites.CariHareketFoyu>
@{
	ViewData["Title"] = "Cari Hareket Raporu";
	Layout = "~/Views/Shared/_Layout.cshtml";
	// Toplam değişkenler tanımlanıyor
	decimal totalAnaDovizBorç = 0;
	decimal totalAnaDovizAlacak = 0;
	decimal totalAnaDovizBakiye = 0;

	decimal totalAltDovizBorç = 0;
	decimal totalAltDovizAlacak = 0;
	decimal totalAltDovizBakiye = 0;

	decimal totalOrjDovizBorç = 0;
	decimal totalOrjDovizAlacak = 0;
	decimal totalOrjDovizBakiye = 0;
}

<link href="~/content/assets/css/bahcepinar.css" rel="stylesheet" />
<!-- Mevcut stil bilgileri korundu -->
<style>
	/* Özet kartları için responsive stiller */
	.summary-cards-container {
		margin-bottom: 2rem;
	}

	/* Tablet ve küçük masaüstü ekranlar */
	@@media (max-width: 991.98px) {
		.summary-cards-container .col-md-4

	{
		margin-bottom: 1rem;
	}

	.summary-cards-container .card-header h5 {
		font-size: 1rem;
		margin-bottom: 0;
	}

	.summary-cards-container .table th,
	.summary-cards-container .table td {
		padding: 0.5rem 0.3rem;
		font-size: 0.85rem;
	}

	}

	/* Tablet ekranlar */
	@@media (max-width: 768px) {
		.summary-cards-container .col-md-4

	{
		flex: 0 0 100%;
		max-width: 100%;
		margin-bottom: 1rem;
	}

	.summary-cards-container .card {
		margin-bottom: 1rem;
	}

	.summary-cards-container .card-header {
		padding: 0.75rem 1rem;
	}

		.summary-cards-container .card-header h5 {
			font-size: 0.95rem;
			text-align: center;
		}

	.summary-cards-container .table {
		margin-bottom: 0;
	}

		.summary-cards-container .table th,
		.summary-cards-container .table td {
			padding: 0.5rem 0.25rem;
			font-size: 0.8rem;
			text-align: center;
		}

		.summary-cards-container .table .text-right {
			text-align: center !important;
		}

	}

	/* Küçük mobil ekranlar */
	@@media (max-width: 576px) {
		.summary-cards-container .row

	{
		margin-left: 0;
		margin-right: 0;
	}

	.summary-cards-container .col-md-4 {
		padding-left: 0.5rem;
		padding-right: 0.5rem;
	}

	.summary-cards-container .card-header {
		padding: 0.5rem 0.75rem;
	}

		.summary-cards-container .card-header h5 {
			font-size: 0.85rem;
			text-align: center;
		}

		.summary-cards-container .card-header i {
			margin-right: 0.3rem;
		}

	.summary-cards-container .table th,
	.summary-cards-container .table td {
		padding: 0.4rem 0.2rem;
		font-size: 0.75rem;
		text-align: center;
		white-space: nowrap;
	}

	.summary-cards-container .table .text-right {
		text-align: center !important;
	}

	/* Para birimi sembollerini küçült */
	.summary-cards-container .table td strong {
		font-size: 0.7rem;
	}

	}

	/* Çok küçük mobil ekranlar */
	@@media (max-width: 480px) {
		.summary-cards-container .card-header h5

	{
		font-size: 0.8rem;
		line-height: 1.2;
	}

	.summary-cards-container .table th,
	.summary-cards-container .table td {
		padding: 0.3rem 0.1rem;
		font-size: 0.7rem;
	}

	.summary-cards-container .table th {
		font-weight: 600;
	}

	.summary-cards-container .table td strong {
		font-size: 0.65rem;
		font-weight: 600;
	}

	}

	/* Yatay scroll için alternatif çözüm (çok küçük ekranlar için) */
	@@media (max-width: 400px) {
		.summary-cards-container .card-body

	{
		overflow-x: auto;
		padding: 0;
	}

	.summary-cards-container .table {
		min-width: 300px;
		margin-bottom: 0;
	}

		.summary-cards-container .table th,
		.summary-cards-container .table td {
			min-width: 60px;
			padding: 0.3rem 0.2rem;
		}

	}

	/* Kartlar arasında düzgün boşluk */
	.summary-cards-container .card {
		box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
		border: 1px solid rgba(0, 0, 0, 0.125);
		transition: all 0.3s ease;
	}

		.summary-cards-container .card:hover {
			box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.15);
			transform: translateY(-2px);
		}

	/* Card header renk düzenlemeleri */
	.summary-cards-container .card-header {
		background: linear-gradient(135deg, #162e54 0%, #0076a8 100%);
		color: white;
		border-bottom: 1px solid rgba(0, 0, 0, 0.125);
	}

		.summary-cards-container .card-header h5 {
			margin: 0;
			font-weight: 600;
		}

		.summary-cards-container .card-header i {
			margin-right: 0.5rem;
		}

	/* Tablo başlık rengi */
	.summary-cards-container .table-dark th {
		background-color: #162e54;
		border-color: #0c1a32;
	}
</style>
<style>
	/* Ana tasarım stilleri */
	body {
		background-color: #f8f9fa;
	}

	.page-title {
		color: #162e54;
		font-weight: 600;
		margin-bottom: 1.5rem;
		border-left: 4px solid #0076a8;
		padding-left: 15px;
	}

	/* Diğer CSS stilleri (korundu) */
	/* ... */

	/* Tıklanabilir evrak tipi için eklenen stil */
	.clickable-row {
		cursor: pointer;
	}

	.clickable-cell {
		color: #0076a8;
		text-decoration: underline;
		cursor: pointer;
	}

		.clickable-cell:hover {
			color: #00648f;
			text-decoration: underline;
		}

	/* PDF Çıktı butonu için stil */
	.btn-pdf {
		background: linear-gradient(135deg, #dc3545 0%, #9a0000 100%);
		color: white;
		border: none;
		border-radius: 0.25rem;
		padding: 0.5rem 1rem;
		transition: all 0.3s ease;
		margin-right: 0.5rem;
	}

		.btn-pdf:hover {
			background: linear-gradient(135deg, #c82333 0%, #7d0000 100%);
			transform: translateY(-2px);
			box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.15);
			color: white;
		}

	/* Genişletilmiş modal stili */
	.modal-xl {
		max-width: 95%;
	}

	/* Grup başlığı stili */
	.group-header {
		background-color: #f0f0f0;
		font-weight: bold;
		border-bottom: 2px solid #162e54;
	}

	/* Toplam satırı stili */
	.group-total {
		background-color: #e6f3ff;
		font-weight: bold;
	}

	.modal-content {
		background-color: #fefefe;
		margin: 50% auto;
		padding: 20px;
		border: 1px solid #888;
		width: 100%;
		height: 100%;
	}

	table.dataTable tbody td {
		font-size: 15px;
		word-wrap: break-word;
		white-space: normal;
	}
</style>
<style>
	/* Alternatif: Basit yatay scroll çözümü */
	.simple-scroll-table {
		width: 100%;
		overflow-x: auto;
		overflow-y: visible;
		margin-bottom: 1rem;
	}

		.simple-scroll-table table {
			min-width: 800px; /* Tablonun minimum genişliği */
			width: 100%;
		}

	@@media (max-width: 768px) {
		.simple-scroll-table

	{
		border: 1px solid #dee2e6;
		border-radius: 0.375rem;
	}

	}
</style>
<style>
	/* Stok arama için özel stil */
	.stok-arama-container {
		position: relative;
		margin-right: 10px;
		min-width: 300px;
	}

	#cariArama {
		width: 100%;
		padding: 8px;
		border: 1px solid #ced4da;
		border-radius: 4px;
	}

	#cariCodeList {
		width: 100%;
		max-height: 200px;
		overflow-y: auto;
	}

	.hidden-select {
		display: none;
	}

	/* PDF çıktısı için ek stiller */
	@@media print {
		body * {
			visibility: hidden;
		}

		#pdfExportContent, #pdfExportContent * {
			visibility: visible;
		}

		#pdfExportContent {
			position: absolute;
			left: 0;
			top: 0;
		}
	}
	/* DataTables butonları için stil */
	div.dt-buttons {
		margin-bottom: 15px;
		text-align: right;
	}

	.dt-button {
		margin-right: 5px !important;
		border-radius: 4px !important;
		padding: 6px 12px !important;
		font-size: 14px !important;
		transition: all 0.3s ease;
	}

		.dt-button:hover {
			opacity: 0.85;
			transform: translateY(-2px);
			box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.15);
		}

	.btn-info {
		background-color: #17a2b8 !important;
		color: white !important;
	}

	.btn-primary {
		background-color: #007bff !important;
		color: white !important;
	}

	.btn-success {
		background-color: #28a745 !important;
		color: white !important;
	}

	.btn-danger {
		background-color: #dc3545 !important;
		color: white !important;
	}

	.btn-secondary {
		background-color: #6c757d !important;
		color: white !important;
	}

	/* Yazdırma görünümü için stil */
	@@media print {
		.dt-buttons, .dataTables_filter, .dataTables_length, .dataTables_paginate, .dataTables_info {
			display: none !important;
		}

		.card-header {
			background-color: #fff !important;
			color: #000 !important;
			border-bottom: 2px solid #000 !important;
		}
		/* PDF çıktısı için stil düzeltmeleri */
		table th {
			background-color: #162e54 !important;
			color: white !important;
			-webkit-print-color-adjust: exact;
			print-color-adjust: exact;
		}
	}
	/* Modal ve detay içeriği için iyileştirilmiş stiller */
	.modal-xl {
		max-width: 95%;
	}

	.modal-body {
		max-height: 75vh;
		overflow-y: auto;
	}

	.detail-table th {
		background-color: #162e54;
		color: white;
		font-weight: bold;
	}

	.detail-table td, .detail-table th {
		border: 1px solid #ddd;
		padding: 8px;
	}

	.detail-table tr:nth-child(even) {
		background-color: #f9f9f9;
	}

	.detail-table .text-right {
		text-align: right;
	}

	/* PDF çıktı butonu için geliştirilmiş stil */
	.btn-pdf {
		background: linear-gradient(135deg, #dc3545 0%, #9a0000 100%);
		color: white;
		border: none;
		border-radius: 0.25rem;
		padding: 0.5rem 1rem;
		transition: all 0.3s ease;
		margin-right: 0.5rem;
		position: relative;
		overflow: hidden;
	}

		.btn-pdf:hover {
			background: linear-gradient(135deg, #c82333 0%, #7d0000 100%);
			transform: translateY(-2px);
			box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.15);
			color: white;
		}

		.btn-pdf:active {
			transform: translateY(0);
			box-shadow: none;
		}

		.btn-pdf::after {
			content: '';
			position: absolute;
			top: 50%;
			left: 50%;
			width: 5px;
			height: 5px;
			background: rgba(255, 255, 255, 0.7);
			opacity: 0;
			border-radius: 100%;
			transform: scale(1, 1) translate(-50%);
			transform-origin: 50% 50%;
		}

		.btn-pdf:focus:not(:active)::after {
			animation: ripple 1s ease-out;
		}

	@@keyframes ripple {
		0% {
			transform: scale(0, 0);
			opacity: 0.5;
		}

		20% {
			transform: scale(25, 25);
			opacity: 0.3;
		}

		100% {
			opacity: 0;
			transform: scale(40, 40);
		}
	}

	.search-form {
		background: transparent;
		box-shadow: none;
		display: flex;
		justify-content: center;
		margin: 0 auto;
	}

	.page-title {
		color: #162e54;
		font-weight: 600;
		margin-bottom: 1.5rem;
		border-left: none;
		padding-left: 15px;
		background-color: transparent;
		box-shadow: none;
		margin: 0;
	}
</style>

<div class="main-content mt-5">
	<div class="container-fluid px-lg-4 px-3 mt-5">
		<!-- Başlık ve Breadcrumb -->
	

		<!-- Arama Formu -->
		<div class="row mb-4">
			<div class="col-lg-12">
				<div class="card search-form">
					<form method="get">
						<!-- Görünen cari bilgisi için gizli alan -->
						<input type="hidden" id="selectedCariText" name="selectedCariText"
							   value="@(ViewData["SelectedCariText"] ?? "")" />

						<!-- Grid sistemi ile form elemanları -->
						<div class="row">
							<!-- Cari arama - 4 birim genişlik -->
							<div class="col-lg-4 col-md-6 col-sm-12 mb-2 mt-4">
								<div class="form-group stok-arama-container mb-0">
									<div class="input-group">
										<input type="text" id="cariArama" class="form-control"
											   placeholder="Cari Kodu veya Adını Yazarak Arayın"
											   list="cariCodeList"
											   autocomplete="off"
											   value="@ViewData["SelectedCariText"]"
											   onchange="updateCariCodeSelect(this.value)">

										<!-- Düğme eklemeleri -->
										<div class="input-group-append">
											<button class="btn btn-outline-secondary" type="button" onclick="openCariSearchModal()">
												<i class="fa fa-search"></i>
											</button>
										</div>

										<div class="input-group-append">
											<button class="btn btn-outline-secondary" type="button" onclick="clearCariSearch()">
												<i class="fa fa-times"></i>
											</button>
										</div>
									</div>
									<datalist id="cariCodeList">
										@{
											// Controller'dan gelen cari kodları listesi
											var cariKodlariList = ViewData["CariKodlari"] != null
											? Newtonsoft.Json.JsonConvert.DeserializeObject<List<Deneme_proje.Models.SirketDurumuEntites.CariHesap>>(ViewData["CariKodlari"].ToString())
											: new List<Deneme_proje.Models.SirketDurumuEntites.CariHesap>();
											// Cari kodlarını listele
											foreach (var cari in cariKodlariList)
											{
												<option value="@cari.CariKod">@cari.CariKod - @cari.CariUnvan1</option>
											}
										}
									</datalist>
									<!-- Gerçek seçim kutusu (gizli) -->
									<select id="cariKodSelect" name="cariKod" class="hidden-select">
										<option value="">Cari Seçiniz</option>
										@foreach (var cari in cariKodlariList)
										{
											var selected = ViewData["SelectedCariKod"]?.ToString() == cari.CariKod ? "selected" : "";
											<option value="@cari.CariKod" @@selected>@cari.CariKod - @cari.CariUnvan1</option>
										}
									</select>
								</div>
							</div>

							<!-- İlk tarih - 3 birim genişlik -->
							<div class="col-lg-3 col-md-6 col-sm-6 mb-2">
								<div class="form-group mb-0">
									<label for="ilkTar">İlk Tarih:</label>
									<input type="date" id="ilkTar" name="ilkTar" class="form-control" value="@ViewData["IlkTarih"]" />
								</div>
							</div>

							<!-- Son tarih - 3 birim genişlik -->
							<div class="col-lg-3 col-md-6 col-sm-6 mb-2">
								<div class="form-group mb-0">
									<label for="sonTar">Son Tarih:</label>
									<input type="date" id="sonTar" name="sonTar" class="form-control" value="@ViewData["SonTarih"]" />
								</div>
							</div>

							<!-- Ara butonu - 2 birim genişlik -->
							<div class="col-lg-2 col-md-6 col-sm-12 mb-2 d-flex align-items-end">
								<button type="submit" class="btn btn-tumblr btn-shadow waves-effect waves-light w-100">Ara</button>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>

		@if (Model != null && Model.Any())
		{
			// Toplamları hesaplama
			foreach (var item in Model)
			{
				// Ana döviz için toplamları hesaplama
				totalAnaDovizBorç += item.AnaDövizBorç;
				totalAnaDovizAlacak += item.AnaDövizAlacak;
				// Bakiye her satırda borç ve alacak farkı olarak hesaplanmalı
				totalAnaDovizBakiye += item.AnaDövizBorç - item.AnaDövizAlacak;

				// Alt döviz için toplamları hesaplama
				totalAltDovizBorç += item.AltDövizBorç;
				totalAltDovizAlacak += item.AltDövizAlacak;
				totalAltDovizBakiye += item.AltDövizBorç - item.AltDövizAlacak;

				// Orjinal döviz için toplamları hesaplama
				totalOrjDovizBorç += item.OrjDövizBorç;
				totalOrjDovizAlacak += item.OrjDövizAlacak;
				totalOrjDovizBakiye += item.OrjDövizBorç - item.OrjDövizAlacak;
			}

			<!-- Özet Bilgiler -->
			<!-- Özet Bilgiler - Responsive -->
			<div class="row mb-4 summary-cards-container">
				<!-- TL Bakiye Özeti -->
				<div class="col-lg-4 col-md-6 col-sm-12">
					<div class="card h-100">
						<div class="card-header">
							<h5><i class="fa fa-lira-sign"></i> TL Bakiye Özeti</h5>
						</div>
						<div class="card-body p-0">
							<div class="table-responsive">
								<table class="table table-bordered m-0">
									<thead class="table-dark">
										<tr>
											<th>Devir</th>
											<th>Borç</th>
											<th>Alacak</th>
											<th>Bakiye</th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td><strong>Devir</strong></td>
											<td class="text-right"><strong>@totalAnaDovizBorç.ToString("N2") ₺</strong></td>
											<td class="text-right"><strong>@totalAnaDovizAlacak.ToString("N2") ₺</strong></td>
											<td class="text-right"><strong>@totalAnaDovizBakiye.ToString("N2") ₺</strong></td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>

				<!-- USD Bakiye Özeti -->
				<div class="col-lg-4 col-md-6 col-sm-12">
					<div class="card h-100">
						<div class="card-header">
							<h5><i class="fa fa-dollar-sign"></i> USD Bakiye Özeti</h5>
						</div>
						<div class="card-body p-0">
							<div class="table-responsive">
								<table class="table table-bordered m-0">
									<thead class="table-dark">
										<tr>
											<th>Devir</th>
											<th>Borç</th>
											<th>Alacak</th>
											<th>Bakiye</th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td><strong>Devir</strong></td>
											<td class="text-right"><strong>@totalAltDovizBorç.ToString("N2") $</strong></td>
											<td class="text-right"><strong>@totalAltDovizAlacak.ToString("N2") $</strong></td>
											<td class="text-right"><strong>@totalAltDovizBakiye.ToString("N2") $</strong></td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>

				<!-- Orjinal Bakiye Özeti -->
				<div class="col-lg-4 col-md-12 col-sm-12">
					<div class="card h-100">
						<div class="card-header">
							<h5><i class="fa fa-globe"></i> Orjinal Döviz Bakiye Özeti</h5>
						</div>
						<div class="card-body p-0">
							<div class="table-responsive">
								<table class="table table-bordered m-0">
									<thead class="table-dark">
										<tr>
											<th>Devir</th>
											<th>Borç</th>
											<th>Alacak</th>
											<th>Bakiye</th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td><strong>Devir</strong></td>
											<td class="text-right"><strong>@totalOrjDovizBorç.ToString("N2")</strong></td>
											<td class="text-right"><strong>@totalOrjDovizAlacak.ToString("N2")</strong></td>
											<td class="text-right"><strong>@totalOrjDovizBakiye.ToString("N2")</strong></td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</div>
		}


		<!-- Cari Hareket Tablosu -->
		<div class="row">
			<div class="col-12">
				<div class="card fade-in">
					
					<div class="card-body">
						@if (Model != null && Model.Any())
						{
							<div class="info-box info mb-4">
								<i class="fa fa-info-circle"></i> Bu raporda <strong>@Model.Count()</strong> adet kayıt bulunmaktadır.
								Tabloyu dışa aktarmak için üstteki butonları kullanabilirsiniz.
							</div>

							<div class="simple-scroll-table">
								<table id="example" class="table table-bordered table-striped" style="width:100%">
									<thead>
										<tr>
											<th style="font-size:16px">Tarih</th>
											<th style="font-size:16px">Açıklama</th>
											<th style="font-size:16px">Evrak Tipi</th>
											<th style="font-size:16px">Vade Tarihi</th>
											<th style="font-size:16px">Ana Döviz Borç</th>
											<th style="font-size:16px">Ana Döviz Alacak</th>
											<th style="font-size:16px">Ana Döviz Bakiye</th>
											
										
											<th style="font-size:16px">Sorumlu İsim</th>
											<th style="font-size:16px">Vade Gün</th>


										</tr>
									</thead>

									<tbody>
										@{
											decimal runningBalance = 0; // Kümülatif toplam için başlangıç değeri

											// Tarihe göre ARTAN sıralama yaparak en eski tarihli kayıttan başla
											var sortedModel = Model.OrderBy(x => x.Tarih).ToList();
										}
										@foreach (var item in sortedModel)
										{
											// Geçerli satır için bakiye hesapla
											decimal currentRowBalance = item.AnaDövizBorç - item.AnaDövizAlacak;

											// Kümülatif toplam güncelleme
											runningBalance += currentRowBalance;

											<tr>
												<td data-order="@item.Tarih.ToString("yyyy-MM-dd")">@item.Tarih.ToString("dd.MM.yyyy")</td>
												<td>@item.Açıklama</td>
												<td class="clickable-cell" onclick="openDetailModal('@item.Cari_GUID')">
													<i class="fa fa-file-alt"></i> @item.EvrakTipi
												</td>
												<td>@(item.VadeTarihi.HasValue ? item.VadeTarihi.Value.ToString("dd.MM.yyyy") : "-")</td>
												<td class="text-right">@item.AnaDövizBorç.ToString("N2")</td>
												<td class="text-right">@item.AnaDövizAlacak.ToString("N2")</td>
												<td class="text-right">@runningBalance.ToString("N2") ₺</td>
									
									
												<td>@item.Sorumluİsmi</td>
												<td>@item.VadeGün</td>


											</tr>
										}
									</tbody>
								</table>
							</div>
						}
						else
						{
							<div class="info-box warning">
								<i class="fa fa-exclamation-triangle"></i> Seçilen kriterlere uygun veri bulunamadı. Lütfen farklı arama kriterleri deneyiniz.
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
		</div>
	</div>
</div>

<!-- Detay Modal - Genişletilmiş boyut -->
<div class="modal fade" id="detayModal" tabindex="-1" role="dialog" aria-labelledby="detayModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl" role="document">
		<!-- modal-xl sınıfı eklendi -->
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="detayModalLabel"><i class="fa fa-file-alt"></i> Evrak Detayları</h5>
				
			</div>
			<div class="modal-body">
				<div class="loading-spinner text-center" id="modalSpinner">
					<i class="fa fa-spinner fa-spin fa-3x"></i>
					<p>Detaylar yükleniyor, lütfen bekleyiniz...</p>
				</div>
				<div id="detayContent" style="display: none;">
					<!-- Detay içeriği buraya yüklenecek -->
				</div>
			</div>
			<div class="modal-footer">
				<!-- PDF Düğmesi Eklendi -->
			
				<button type="button" class="btn btn-modal-close" data-dismiss="modal">Kapat</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="cariSearchModal" tabindex="-1" role="dialog" aria-labelledby="cariSearchModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="cariSearchModalLabel"><i class="fa fa-search"></i> Cari Arama</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<!-- Modal içi arama kutusu -->
				<div class="form-group">
					<div class="input-group mb-3">
						<div class="input-group-prepend">
							<span class="input-group-text"><i class="fa fa-search"></i></span>
						</div>
						<input type="text" class="form-control" id="cariModalSearch"
							   placeholder="Cari Kodu veya Ünvanı ile Arayın..."
							   onkeyup="filterCariTable()">
					</div>
				</div>

				<!-- Cari listesi tablosu -->
				<div class="table" style="max-height: 400px; overflow-y: auto;">
					<table id="cariTable" class="table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th>Cari Kodu</th>
								<th>Cari Ünvanı</th>
								<th>İşlem</th>
							</tr>
						</thead>
						<tbody>
							@{
								// Controller'dan gelen aynı cari kodları listesini kullan
								var cariList = ViewData["CariKodlari"] != null
								? Newtonsoft.Json.JsonConvert.DeserializeObject<List<Deneme_proje.Models.SirketDurumuEntites.CariHesap>>(ViewData["CariKodlari"].ToString())
								: new List<Deneme_proje.Models.SirketDurumuEntites.CariHesap>();

								foreach (var cari in cariList)
								{
									<tr>
										<td>@cari.CariKod</td>
										<td>@cari.CariUnvan1</td>
										<td class="text-center">
											<button type="button" class="btn btn-sm btn-primary"
													onclick="selectCariFromModal('@cari.CariKod', '@cari.CariUnvan1'); return false;">
												<i class="fa fa-check"></i> Seç
											</button>
										</td>
									</tr>
								}
							}
						</tbody>
					</table>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
			</div>
		</div>
	</div>
</div>

<!-- jQuery & Bootstrap Core -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>

<!-- DataTables -->
<script type="text/javascript" src="~/Content/DataTables/datatables.min.js"></script>

<!-- Buttons ve Uzantıları -->
<script type="text/javascript" src="https://cdn.datatables.net/buttons/2.3.6/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/2.3.6/js/buttons.html5.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/2.3.6/js/buttons.print.min.js"></script>

<!-- Responsive DataTables -->
<script src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.js"></script>

<!-- PDF export için html2pdf kütüphanesi (Modal için) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
 <script>
	document.addEventListener('DOMContentLoaded', function () {
		let table = new DataTable('#example');
	});
</script>
 <script>
			// Modal işlemleri için JavaScript
	// Cari Arama Modal fonksiyonları
	function openCariSearchModal() {
		// Modalı aç
		$('#cariSearchModal').modal('show');
		// Arama kutusuna odaklan
		setTimeout(function() {
			$('#cariModalSearch').focus();
		}, 500);
	}

	// Cari tablosundaki aramaları filtreleme
	function filterCariTable() {
		var input, filter, table, tr, td1, td2, i, txtValue1, txtValue2;
		input = document.getElementById("cariModalSearch");
		filter = input.value.toUpperCase();
		table = document.getElementById("cariTable");
		tr = table.getElementsByTagName("tr");

		// Tüm satırları dolaşarak arama metnine uyan kayıtları göster
		for (i = 0; i < tr.length; i++) {
			if (tr[i].getElementsByTagName("td").length > 0) { // Başlık satırını atla
				td1 = tr[i].getElementsByTagName("td")[0]; // Cari Kodu
				td2 = tr[i].getElementsByTagName("td")[1]; // Cari Ünvanı

				if (td1 && td2) {
					txtValue1 = td1.textContent || td1.innerText;
					txtValue2 = td2.textContent || td2.innerText;

					if (txtValue1.toUpperCase().indexOf(filter) > -1 ||
						txtValue2.toUpperCase().indexOf(filter) > -1) {
						tr[i].style.display = "";
					} else {
						tr[i].style.display = "none";
					}
				}
			}
		}
	}

	// Modal'dan cari seçimi yapıldığında
	function selectCariFromModal(cariKod, cariUnvan) {
		try {
			// Cari kodunu ve görünen metni ayarla
			document.getElementById('cariKodSelect').value = cariKod;
			document.getElementById('cariArama').value = cariKod + " - " + cariUnvan;

			// Hidden input'a değeri kaydet
			if (document.getElementById('selectedCariText')) {
				document.getElementById('selectedCariText').value = cariKod + " - " + cariUnvan;
			}

			console.log("Cari seçildi: " + cariKod + " - " + cariUnvan);

			// Modalı kapat
			$('#cariSearchModal').modal('hide');

		} catch (error) {
			console.error("Cari seçim hatası:", error);
		}
	}

	// Input temizleme fonksiyonu
	function clearCariSearch() {
		document.getElementById('cariArama').value = '';
		document.getElementById('cariKodSelect').value = '';

		if (document.getElementById('selectedCariText')) {
			document.getElementById('selectedCariText').value = '';
		}

		document.getElementById('cariArama').focus();
	}

	// Sayfa yüklendiğinde modalı hazırla
	$(document).ready(function() {
		// Satıra tıklanınca da seçim yap
		$(document).on('click', '#cariTable tbody tr', function(e) {
			if (!$(e.target).is('button') && !$(e.target).is('i')) {
				var cariKod = $(this).find('td:first').text();
				var cariUnvan = $(this).find('td:eq(1)').text();
				selectCariFromModal(cariKod, cariUnvan);
			}
		});

		// Modal Enter tuşuna basıldığında ilk eşleşen kaydı seç
		$('#cariModalSearch').keypress(function(e) {
			if (e.which == 13) { // Enter tuşu
				e.preventDefault();
				// Görünür durumdaki ilk satırı bul
				var firstVisibleRow = $('#cariTable tbody tr:visible').first();
				if (firstVisibleRow.length > 0) {
					var cariKod = firstVisibleRow.find('td:first').text();
					var cariUnvan = firstVisibleRow.find('td:eq(1)').text();
					selectCariFromModal(cariKod, cariUnvan);
				}
			}
		});

		// Modal kapatma butonlarına tıklandığında
		$('.btn-modal-close, .close, #cariSearchModal .modal-footer .btn-secondary').click(function() {
			$('#cariSearchModal').modal('hide');
		});

		// Modal kapatıldığında
		$('#cariSearchModal').on('hidden.bs.modal', function() {
			// Modalı kapattıktan sonra arama kutusunu temizle
			$('#cariModalSearch').val('');
			filterCariTable(); // Tabloyu sıfırla
		});
	});
</script>


 <script>
		$('#example').DataTable({
		"order": [[0, "asc"]], // İlk sütunu (Tarih sütunu) küçükten büyüğe sırala
		"dom": '<"row"<"col-sm-12"B>>' +
			'<"row"<"col-sm-6"l><"col-sm-6"f>>' +
			't' +
			'<"row"<"col-sm-6"i><"col-sm-6"p>>',
		"language": {
			"url": "/Content/DataTables/turkish.json"
		},
		"buttons": [
			{
				extend: 'copy',
				text: '<i class="fa fa-copy"></i> Kopyala',
				className: 'btn btn-info',
				exportOptions: {
					columns: ':visible'
				}
			},
			{
				extend: 'csv',
				text: '<i class="fa fa-file-csv"></i> CSV',
				className: 'btn btn-primary',
				exportOptions: {
					columns: ':visible'
				}
			},
			{
				extend: 'excel',
				text: '<i class="fa fa-file-excel"></i> Excel',
				className: 'btn btn-success',
				exportOptions: {
					columns: ':visible'
				}
			},
			{
				extend: 'pdf',
				text: '<i class="fa fa-file-pdf"></i> PDF',
				className: 'btn btn-danger',
				exportOptions: {
					columns: [0, 1, 2, 3, 4, 5, 6, 7, 8] // Explicitly specify all columns including "Vade Gün"
				},
				customize: function(doc) {
					// Set column widths proportionally
					doc.content[1].table.widths = ['10%', '20%', '12%', '10%', '12%', '12%', '12%', '8%', '4%'];

					doc.defaultStyle.fontSize = 9;
					doc.styles.tableHeader.fontSize = 10;
					doc.styles.tableHeader.alignment = 'center';
					doc.styles.title.fontSize = 14;
					doc.content[0].text = 'Cari Hareket Raporu';
					doc.styles.tableHeader.fillColor = '#162e54';
					doc.styles.tableHeader.color = '#fff';

					// Set text alignment for specific columns
					doc.content[1].table.body.forEach(function(row, index) {
						if (index > 0) { // Skip header row
							// Right align numeric columns (Ana Döviz Borç, Alacak, Bakiye)
							row[4].alignment = 'right'; // Ana Döviz Borç
							row[5].alignment = 'right'; // Ana Döviz Alacak
							row[6].alignment = 'right'; // Ana Döviz Bakiye
							row[8].alignment = 'center'; // Vade Gün
						}
					});

					// Set page orientation to landscape for better fit
					doc.pageOrientation = 'landscape';
					doc.pageMargins = [20, 20, 20, 20];
				}
			},
			{
				extend: 'print',
				text: '<i class="fa fa-print"></i> Yazdır',
				className: 'btn btn-secondary',
				exportOptions: {
					columns: ':visible'
				}
			}
		],
		"columnDefs": [
			{ "targets": "_all" } // Kolon genişliklerini sabitleme
		],
		"responsive": false,
		"ordering": true,
		"paging": true,
		"pageLength": 5000,
		"lengthMenu": [[10, 25, 50, 100, 5000], [10, 25, 50, 100, "5000"]]
	});
</script>


 <script>
		// Detay modalını açma işlevi - stokları gruplayarak getirecek
		   // Detay modalını açma işlevi - iyileştirilmiş versiyon
	function openDetailModal(guid) {
		if (!guid) {
			console.error('GUID değeri eksik veya geçersiz');
			return;
		}

		// Modal açılıyor
		$('#detayModal').modal('show');

		// Yükleniyor göstergesi gösterilir
		$('#modalSpinner').show();
		$('#detayContent').hide().empty();

		// AJAX isteği gönderme
		$.ajax({
			url: '/SirketDurumu/GetCariHareketDetay',
			type: 'GET',
			data: { guid: guid },
			dataType: 'html',
			timeout: 30000, // 30 saniye zaman aşımı
			success: function(data) {
				if (!data || data.trim() === '') {
					// Boş yanıt durumu
					$('#modalSpinner').hide();
					$('#detayContent').html('<div class="alert alert-warning">Bu evrak için detay bilgisi bulunamadı.</div>').show();
					return;
				}

				// Yükleniyor göstergesi gizlenir
				$('#modalSpinner').hide();

				// İçerik gösterilir
				$('#detayContent').html(data).show();

				// DataTable varsa yeniden initialize et
				if ($.fn.DataTable.isDataTable('#detailTable')) {
					$('#detailTable').DataTable().destroy();
				}

				// Detay tablosunu DataTable olarak yeniden başlat (varsa)
				if ($('#detailTable').length > 0) {
					$('#detailTable').DataTable({
						"language": {
							"url": "/Content/DataTables/turkish.json"
						},
						"paging": false,
						"searching": false,
						"info": false
					});
				}
			},
			error: function(xhr, status, error) {
				// Hata durumunda
				$('#modalSpinner').hide();
				var errorMessage = xhr.status + ': ' + (xhr.statusText || error);
				$('#detayContent').html('<div class="alert alert-danger">' +
					'<i class="fa fa-exclamation-triangle"></i> Detaylar yüklenirken bir hata oluştu.<br>' +
					'Hata detayı: ' + errorMessage + '</div>').show();
				console.error('Detay getirme hatası:', error);
			}
		});
	}

	// Sayfa yüklendikten sonra PDF ve modal işlevlerini başlat
	$(document).ready(function() {
		// Modal kapatma düğmesine tıklandığında
		$('.btn-modal-close, .close').click(function() {
			$('#detayModal').modal('hide');
		});

		// Modal kapatıldığında içeriği temizle
		$('#detayModal').on('hidden.bs.modal', function() {
			$('#detayContent').empty();
		});

		// ESC tuşu ile modalı kapatma işlemi
		$(document).keyup(function(e) {
			if (e.key === "Escape") { // ESC tuşu
				$('#detayModal').modal('hide');
			}
		});
	});
		   // PDF olarak dışa aktarma işlevi
	// PDF olarak dışa aktarma işlevi - düzeltilmiş versiyon
	function exportToPDF() {
		// Yükleme göstergesi göster
		$('#modalSpinner').show();

		// Modal içeriğini PDF'e dönüştürme işlemi
		var element = document.getElementById('detayContent');

		if (!element || element.innerHTML.trim() === '') {
			alert('İçerik yüklenmeden PDF oluşturulamaz. Lütfen içeriğin tam olarak yüklenmesini bekleyin.');
			$('#modalSpinner').hide();
			return;
		}

		// İçeriği kopyala ve gizli bir div'e ekle
		var clonedContent = element.cloneNode(true);
		var tempDiv = document.createElement('div');
		tempDiv.id = 'pdfExportContent';
		tempDiv.style.width = '100%';
		tempDiv.style.height = 'auto';
		tempDiv.style.position = 'absolute';
		tempDiv.style.left = '-9999px';
		tempDiv.appendChild(clonedContent);
		document.body.appendChild(tempDiv);

		// Tablolardaki tüm stil ve genişlik bilgilerini korumak için
		var tables = tempDiv.querySelectorAll('table');
		tables.forEach(function(table) {
			table.style.width = '100%';
			table.style.borderCollapse = 'collapse';

			var cells = table.querySelectorAll('th, td');
			cells.forEach(function(cell) {
				cell.style.border = '1px solid #ddd';
				cell.style.padding = '8px';
				cell.style.textAlign = cell.className.includes('text-right') ? 'right' : 'left';
			});
		});

		// PDF dosyası oluşturma seçenekleri
		var opt = {
			margin: 10,
			filename: 'evrak-detayi.pdf',
			image: { type: 'jpeg', quality: 1 },
			html2canvas: {
				scale: 2,
				useCORS: true,
				logging: true,
				letterRendering: true
			},
			jsPDF: {
				unit: 'mm',
				format: 'a4',
				orientation: 'landscape',
				compress: true
			}
		};

		// DOM'un tamamen render olması için bekle
		setTimeout(function() {
			// PDF oluştur ve indir
			html2pdf().from(tempDiv).set(opt).save().then(function() {
				// İşlem tamamlandıktan sonra geçici div'i kaldır
				document.body.removeChild(tempDiv);
				$('#modalSpinner').hide();
			}).catch(function(error) {
				console.error('PDF oluşturma hatası:', error);
				alert('PDF oluşturulurken bir hata oluştu: ' + error.message);
				document.body.removeChild(tempDiv);
				$('#modalSpinner').hide();
			});
		}, 1000); // 1 saniye bekle - içeriğin tam olarak yüklenmesi için
	}
</script>

 <script>
	// Modal kapatma fonksiyonunu düzeltmek için
	$(document).ready(function() {
		// Modal kapatma düğmesine tıklandığında
		$('.btn-modal-close, .close').click(function() {
			$('#detayModal').modal('hide');
		});

		// ESC tuşu ile modalı kapatma işlemi
		$(document).keyup(function(e) {
			if (e.key === "Escape") { // ESC tuşu
				$('#detayModal').modal('hide');
			}
		});
	});
</script>

 <script>
		// Arama inputundan seçilen değeri gerçek select'e aktarmak için
		function updateCariCodeSelect(selectedValue) {
		// Seçilen kodu gizli selectbox'a aktar
		var cariKodSelect = document.getElementById('cariKodSelect');

		if (cariKodSelect && selectedValue) {
			cariKodSelect.value = selectedValue;

			// Eğer selectedValue bir cari kodu ise ilgili unvanı bul ve göster
			var selectedOption = document.querySelector('#cariKodSelect option[value="' + selectedValue + '"]');
			if (selectedOption) {
				// Seçilen optionın içeriğini göster (Kod - Unvan)
				document.getElementById('cariArama').value = selectedOption.textContent;
				// Seçili metin değerini hidden input'a kaydet
				document.getElementById('selectedCariText').value = selectedOption.textContent;
			}
		}
	}

	// Form submit öncesi değerleri kontrol et
	document.addEventListener('DOMContentLoaded', function() {
		var searchForm = document.querySelector('.search-form form');

		if (searchForm) {
			searchForm.addEventListener('submit', function(e) {
				// Eğer bir cari kodu seçilmişse
				var cariArama = document.getElementById('cariArama');
				var cariKodSelect = document.getElementById('cariKodSelect');

				if (cariArama && cariArama.value && cariKodSelect) {
					// Cari kodu bölümünü ayıkla (genellikle "-" işareti öncesindeki kısım)
					var cariKodValue = cariArama.value.split('-')[0].trim();

					// Eğer seçili değer yoksa, cari kodunu manuel olarak ayarla
					if (!cariKodSelect.value && cariKodValue) {
						cariKodSelect.value = cariKodValue;
					}
				}

				// Tarihler için kontrol
				var ilkTar = document.getElementById('ilkTar');
				var sonTar = document.getElementById('sonTar');

				// Tarih formatının kontrol edildiğinden emin ol
				if (ilkTar && !ilkTar.value) {
					var firstDay = new Date();
					firstDay.setDate(1);
					ilkTar.value = formatDate(firstDay);
				}

				if (sonTar && !sonTar.value) {
					var lastDay = new Date();
					var nextMonth = new Date(lastDay.getFullYear(), lastDay.getMonth() + 1, 0);
					sonTar.value = formatDate(nextMonth);
				}

				// Form değerlerini konsola yazdır (debug için)
				console.log('Form gönderiliyor:');
				console.log('cariKod:', cariKodSelect ? cariKodSelect.value : 'undefined');
				console.log('ilkTar:', ilkTar ? ilkTar.value : 'undefined');
				console.log('sonTar:', sonTar ? sonTar.value : 'undefined');
			});
		}

		// Sayfa yüklendiğinde varsayılan tarih aralığını ayarla
		var today = new Date();
		var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
		var lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);

		var ilkTarInput = document.getElementById('ilkTar');
		var sonTarInput = document.getElementById('sonTar');

		// Eğer tarih alanları boşsa, varsayılan değerleri ata
		if (ilkTarInput && !ilkTarInput.value) {
			ilkTarInput.value = formatDate(firstDay);
		}

		if (sonTarInput && !sonTarInput.value) {
			sonTarInput.value = formatDate(lastDay);
		}
	});

	// Tarih formatını YYYY-MM-DD olarak ayarla
	function formatDate(date) {
		var d = new Date(date),
			month = '' + (d.getMonth() + 1),
			day = '' + d.getDate(),
			year = d.getFullYear();

		if (month.length < 2)
			month = '0' + month;
		if (day.length < 2)
			day = '0' + day;

		return [year, month, day].join('-');
	}
			// Cari Arama Modal fonksiyonları
		function openCariSearchModal() {
			// Modalı aç
			$('#cariSearchModal').modal('show');
			// Arama kutusuna odaklan
			setTimeout(function() {
				$('#cariModalSearch').focus();
			}, 500);
		}

		// Cari tablosundaki aramaları filtreleme
		function filterCariTable() {
			var input, filter, table, tr, td1, td2, i, txtValue1, txtValue2;
			input = document.getElementById("cariModalSearch");
			filter = input.value.toUpperCase();
			table = document.getElementById("cariTable");
			tr = table.getElementsByTagName("tr");

			// Tüm satırları dolaşarak arama metnine uyan kayıtları göster
			for (i = 0; i < tr.length; i++) {
				td1 = tr[i].getElementsByTagName("td")[0]; // Cari Kodu
				td2 = tr[i].getElementsByTagName("td")[1]; // Cari Ünvanı

				if (td1 && td2) {
					txtValue1 = td1.textContent || td1.innerText;
					txtValue2 = td2.textContent || td2.innerText;

					if (txtValue1.toUpperCase().indexOf(filter) > -1 ||
						txtValue2.toUpperCase().indexOf(filter) > -1) {
						tr[i].style.display = "";
					} else {
						tr[i].style.display = "none";
					}
				}
			}
		}

		// Modal'dan cari seçimi yapıldığında
		function selectCariFromModal(cariKod, cariUnvan) {
			// Cari kodunu ve görünen metni ayarla
			document.getElementById('cariKodSelect').value = cariKod;
			document.getElementById('cariArama').value = cariKod + " - " + cariUnvan;
			document.getElementById('selectedCariText').value = cariKod + " - " + cariUnvan;

			// Modalı kapat
			$('#cariSearchModal').modal('hide');
		}

		// Normal arama kutusu değişikliklerini dinleme
		function updateCariCodeSelect(selectedValue) {
			// Seçilen kodu gizli selectbox'a aktar
			document.getElementById('cariKodSelect').value = selectedValue;

			// Eğer selectedValue bir cari kodu ise ilgili unvanı bul ve göster
			var selectedOption = document.querySelector('#cariKodSelect option[value="' + selectedValue + '"]');
			if (selectedOption) {
				// Seçilen optionın içeriğini göster (Kod - Unvan)
				document.getElementById('cariArama').value = selectedOption.textContent;
				// Seçili metin değerini hidden input'a kaydet
				document.getElementById('selectedCariText').value = selectedOption.textContent;
			}
		}

		// Sayfa yüklendiğinde varsayılan tarih aralığını ayarla

		// Sayfa yüklendiğinde varsayılan tarih aralığını ayarla
		document.addEventListener('DOMContentLoaded', function() {
			// Eğer tarih alanları boşsa, varsayılan olarak bu ayın ilk ve son gününü ata
			var today = new Date();
			var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
			var lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);

			var ilkTarInput = document.getElementById('ilkTar');
			var sonTarInput = document.getElementById('sonTar');

			// Tarih formatını YYYY-MM-DD olarak ayarla
			function formatDate(date) {
				var d = new Date(date),
					month = '' + (d.getMonth() + 1),
					day = '' + d.getDate(),
					year = d.getFullYear();

				if (month.length < 2)
					month = '0' + month;
				if (day.length < 2)
					day = '0' + day;

				return [year, month, day].join('-');
			}

			// Eğer tarih alanları boşsa, varsayılan değerleri ata
			if (!ilkTarInput.value) {
				ilkTarInput.value = formatDate(firstDay);
			}

			if (!sonTarInput.value) {
				sonTarInput.value = formatDate(lastDay);
			}
		});
</script>
 <style>
	.stok-arama-container {
		position: relative;
		margin-right: 10px;
		min-width: 300px;
	}

		/* Arama butonunu güzelleştirme */
		.stok-arama-container .btn-outline-secondary {
			background-color: #f8f9fa;
			border-color: #ced4da;
			color: #495057;
		}

			.stok-arama-container .btn-outline-secondary:hover {
				background-color: #e9ecef;
			}

	/* Modal içindeki tablo stilleri */
	#cariTable {
		width: 100%;
		border-collapse: collapse;
	}

		#cariTable th {
			position: sticky;
			top: 0;
			background-color: #162e54;
			color: white;
			z-index: 10;
		}

		#cariTable tbody tr:hover {
			background-color: #f0f8ff;
			cursor: pointer;
		}

	/* Modal stilleri */
	#cariSearchModal .modal-content {
		border-radius: 0.5rem;
		box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
	}

	#cariSearchModal .modal-header {
		background: linear-gradient(135deg, #162e54 0%, #0076a8 100%);
		color: white;
		border-radius: 0.5rem 0.5rem 0 0;
	}

	#cariSearchModal .close {
		color: white;
		text-shadow: none;
		opacity: 0.8;
	}

		#cariSearchModal .close:hover {
			opacity: 1;
		}

	#cariSearchModal .modal-footer {
		border-top: 1px solid #e9ecef;
		background-color: #f8f9fa;
		border-radius: 0 0 0.5rem 0.5rem;
	}

	/* Mobil uyumluluk */
	@@media (max-width: 576px) {
		.stok-arama-container {
			min-width: auto;
			width: 100%;
		}

		#cariSearchModal .modal-dialog {
			margin: 0.5rem;
			max-width: none;
		}
	}
</style>
 <style>
	/* Grid düzeni için ek stiller */
	.search-form {
		background: transparent;
		box-shadow: none;
		padding: 15px;
	}

		.search-form form {
			width: 100%;
		}

	.form-group {
		margin-bottom: 0;
	}

	/* Ara butonu için stil */
	.btn-tumblr {
		margin-bottom: 0;
		height: 38px;
	}

	/* Tarih seçiciler için daha iyi hizalama */
	.form-group label {
		display: block;
		margin-bottom: 0.5rem;
		font-weight: 500;
	}

	/* Cari arama inputu düzeni */
	.stok-arama-container {
		position: relative;
		width: 100%;
	}

	/* Mobil görünüm için grid düzenlemesi */
	@@media (max-width: 767.98px) {
		.row > [class^="col-"] {
			margin-bottom: 1rem;
		}

		.d-flex.align-items-end {
			justify-content: center;
		}

		.btn-tumblr {
			width: 100%;
		}
	}

	/* Ara butonu dikey hizalama */
	.d-flex.align-items-end {
		height: 100%;
	}

		.d-flex.align-items-end .btn {
			margin-top: 1.5rem;
		}

	/* Input grup düzeltmesi */
	.input-group {
		flex-wrap: nowrap;
	}

	.input-group-append .btn {
		border-radius: 0;
	}

	.input-group-append:last-child .btn {
		border-top-right-radius: 0.25rem;
		border-bottom-right-radius: 0.25rem;
	}
</style>
 <style>
	/* Input grubu için stil */
	.input-group {
		display: flex;
		width: 100%;
	}

	.input-group-append {
		display: flex;
	}

		.input-group-append .btn {
			border-radius: 0;
			margin: 0;
			white-space: nowrap;
		}

			.input-group-append .btn:last-child {
				border-radius: 0 4px 4px 0;
			}

	/* Arama butonlarını güzelleştirme */
	.btn-outline-secondary {
		background-color: #f8f9fa;
		border-color: #ced4da;
		color: #495057;
	}

		.btn-outline-secondary:hover {
			background-color: #e9ecef;
		}

	/* Modal içindeki tablo stilleri */
	#cariTable {
		width: 100%;
		border-collapse: collapse;
	}

		#cariTable th {
			position: sticky;
			top: 0;
			background-color: #162e54;
			color: white;
			z-index: 10;
		}

		#cariTable tbody tr:hover {
			background-color: #f0f8ff;
			cursor: pointer;
		}

	/* Modal stilleri */
	#cariSearchModal .modal-content {
		border-radius: 0.5rem;
		box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
	}

	#cariSearchModal .modal-header {
		background: linear-gradient(135deg, #162e54 0%, #0076a8 100%);
		color: white;
		border-radius: 0.5rem 0.5rem 0 0;
	}

	#cariSearchModal .close {
		color: white;
		text-shadow: none;
		opacity: 0.8;
	}

		#cariSearchModal .close:hover {
			opacity: 1;
		}

	#cariSearchModal .modal-footer {
		border-top: 1px solid #e9ecef;
		background-color: #f8f9fa;
		border-radius: 0 0 0.5rem 0.5rem;
	}

	/* Seç butonunu öne çıkarma */
	.btn-sm.btn-primary {
		padding: 0.25rem 0.5rem;
		font-size: 0.82rem;
	}

	/* En son eklenen yeni stiller */
	.stok-arama-container {
		position: relative;
		margin-right: 10px;
	}

	#cariArama {
		border-radius: 4px 0 0 4px;
	}

	.modal {
		background-color: rgba(0, 0, 0, 0.5);
	}

	.modal-backdrop {
		position: fixed;
		top: 0;
		left: 0;
		z-index: 1040;
		width: 100vw;
		height: 100vh;
		background-color: rgba(0, 0, 0, 0.5);
	}

		.modal-backdrop.fade {
			opacity: 0;
		}

		.modal-backdrop.show {
			opacity: 0.5;
		}

	/* Safari için modal düzeltmesi */
	@@media not all and (min-resolution:.001dpcm) {
		@@supports (-webkit-appearance:none) {
			.modal {
				-webkit-transform: translateZ(0);
				transform: translateZ(0);
			}
		}
	}

	/* Mobil uyumluluk */
	@@media (max-width: 576px) {
		.stok-arama-container {
			min-width: auto;
			width: 100%;
		}

		#cariSearchModal .modal-dialog {
			margin: 0.5rem;
			max-width: none;
		}
	}
</style>
<!-- CSS: Stil eklemeleri -->
<!-- CSS: Stil eklemeleri -->
 <style>
	/* Hover effect for table rows */
	#example tbody tr {
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

		#example tbody tr:hover {
			background-color: #f0f8ff; /* Light blue on hover */
		}

		/* Style for cells in highlighted rows */
		#example tbody tr.highlighted td {
			background-color: #e0f0ff; /* Darker blue when clicked */
			border-left: 3px solid #0076a8; /* Left border for emphasis */
		}
</style>

<!-- JavaScript for row highlighting -->
 <script>
	$(document).ready(function() {
		// Add click functionality to table rows
		$('#example tbody').on('click', 'tr', function(event) {
			// Toggle highlighted class on this row
			$(this).toggleClass('highlighted');

			// Stop propagation to prevent other handlers from firing
			if (!$(event.target).hasClass('clickable-cell')) {
				event.stopPropagation();
			}
		});
	});
</script>