@model IEnumerable<Deneme_proje.Models.Entities.IsEmriModel>
@{
    ViewData["Title"] = "Malzeme Tüketimi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="main-content mt-5">
    <div class="card">
        <div class="card-header">
            <h3>Malzeme Tüketimi</h3>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <!-- İş Emri Seçim Bölümü -->
                <div class="row mb-4">
                    <div class="col-md-8">
                        <label for="isEmriSelect" class="form-label"><strong>İş Emri Seçin:</strong></label>
                        <select id="isEmriSelect" class="form-select" onchange="isEmriSecildi()">
                            <option value="">-- İş Emri Seçiniz --</option>
                            @foreach (var isEmri in Model)
                            {
                                <option value="@isEmri.is_Kod"
                                        data-urun-kodu="@isEmri.UrunKodu"
                                        data-urun-adi="@isEmri.UrunAdi"
                                        data-miktar="@isEmri.Miktar">
                                    @isEmri.is_Kod - @isEmri.UrunAdi (Miktar: @isEmri.Miktar)
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="sarfInput" class="form-label"><strong>Sarf Alanı:</strong></label>
                        <div class="input-group">
                            <input type="number" id="sarfInput" class="form-control" placeholder="Miktar" step="0.01" min="0">
                            <button class="btn btn-success" type="button" onclick="sarfGiris()">Sarf Giriş</button>
                            <button class="btn btn-warning" type="button" onclick="sarfCikis()">Sarf Çıkış</button>
                        </div>
                    </div>
                </div>

                <!-- Seçili İş Emri Bilgileri -->
                <div id="secili-isemri-bilgi" style="display:none;" class="alert alert-info mb-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>İş Emri:</strong> <span id="secili-isemri"></span>
                        </div>
                        <div class="col-md-3">
                            <strong>Ürün Kodu:</strong> <span id="secili-urun-kodu"></span>
                        </div>
                        <div class="col-md-3">
                            <strong>Ürün Adı:</strong> <span id="secili-urun-adi"></span>
                        </div>
                        <div class="col-md-3">
                            <strong>Planlanan Miktar:</strong> <span id="secili-miktar"></span>
                        </div>
                    </div>
                </div>

                <!-- Hesaplama Bölümü -->
                <div id="hesaplama-bolumu" style="display:none;" class="mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="row align-items-end">
                                <div class="col-md-3">
                                    <label for="hesaplaInput" class="form-label"><strong>Üretim Miktarı:</strong></label>
                                    <input type="number" id="hesaplaInput" class="form-control" placeholder="Üretim miktarı" step="0.01" min="0">
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-primary" onclick="hesapla()">Hesapla</button>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-secondary" onclick="temizle()">Temizle</button>
                                </div>
                                <div class="col-md-5">
                                    <div class="alert alert-warning mb-0" style="font-size: 0.9em;">
                                        <strong>Uyarı:</strong> Tüketilecek miktar, planlanan/hesaplanan miktarın %10 altı veya üstü olabilir.
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Malzeme Listesi -->
                <div id="malzeme-container" style="display:none;">
                    <div class="card">
                        <div class="card-header">
                            <h5>Malzeme Listesi</h5>
                        </div>
                        <div class="card-body">
                            <div id="loading" style="text-align:center; display:none;">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Yükleniyor...</span>
                                </div>
                                <p class="mt-2">Malzemeler yükleniyor...</p>
                            </div>

                            <div id="malzeme-tablo-container" style="display:none;">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Stok Kodu</th>
                                                <th>Malzeme Adı</th>
                                                <th>Birim</th>
                                                <th>Planlanan</th>
                                                <th>Tüketilen</th>
                                                <th>Kalan</th>
                                                <th style="background-color: #e3f2fd;">Hesaplanan</th>
                                                <th>Tüketilecek Miktar</th>
                                                <th>Durum</th>
                                            </tr>
                                        </thead>
                                        <tbody id="malzeme-tbody">
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <div id="error-msg" class="alert alert-danger" style="display:none;"></div>
                        </div>
                    </div>
                </div>

                <!-- Kaydet Butonu -->
                <div id="kaydet-container" style="display:none;" class="text-center mt-4">
                    <button id="kaydet-btn" class="btn btn-success btn-lg" onclick="tuketimKaydet()">
                        <i class="fas fa-save"></i> Tüketimi Kaydet
                    </button>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center">
                    <h5>Aktif İş Emri Bulunamadı</h5>
                    <p>Şu anda tüketim yapılabilecek aktif iş emri bulunmamaktadır.</p>
                </div>
            }
        </div>
    </div>
</div>

 <script>
    // Global değişkenler
    var currentIsEmri = '';
    var currentUrun = '';
    var currentPlanlananMiktar = 0;
    var orijinalPlanlananMiktar = 0; // Orijinal planlanan miktar (sarf işlemleri için)
    var malzemeListesi = [];

    // İş emri seçildiğinde
    function isEmriSecildi() {
        var select = document.getElementById('isEmriSelect');
        var selectedOption = select.options[select.selectedIndex];

        if (select.value === '') {
            // Hiçbir iş emri seçilmemiş
            document.getElementById('secili-isemri-bilgi').style.display = 'none';
            document.getElementById('hesaplama-bolumu').style.display = 'none';
            document.getElementById('malzeme-container').style.display = 'none';
            document.getElementById('kaydet-container').style.display = 'none';
            return;
        }

        // Seçili iş emri bilgilerini al
        currentIsEmri = select.value;
        currentUrun = selectedOption.getAttribute('data-urun-kodu');
        currentPlanlananMiktar = parseFloat(selectedOption.getAttribute('data-miktar'));
        orijinalPlanlananMiktar = currentPlanlananMiktar; // Orijinal değeri sakla

        // Bilgileri göster
        document.getElementById('secili-isemri').textContent = currentIsEmri;
        document.getElementById('secili-urun-kodu').textContent = currentUrun;
        document.getElementById('secili-urun-adi').textContent = selectedOption.getAttribute('data-urun-adi');
        document.getElementById('secili-miktar').textContent = currentPlanlananMiktar;

        document.getElementById('secili-isemri-bilgi').style.display = 'block';
        document.getElementById('hesaplama-bolumu').style.display = 'block';

        // Sarf inputunu temizle
        document.getElementById('sarfInput').value = '';
        document.getElementById('hesaplaInput').value = '';

        // Malzemeleri getir
        malzemeListesiniGetir();
    }

    // Sarf giriş fonksiyonu
    function sarfGiris() {
        var sarfMiktar = parseFloat(document.getElementById('sarfInput').value);
        if (!sarfMiktar || sarfMiktar <= 0) {
            alert('Lütfen geçerli bir sarf miktarı girin.');
            return;
        }

        currentPlanlananMiktar += sarfMiktar;
        document.getElementById('secili-miktar').textContent = currentPlanlananMiktar;
        document.getElementById('sarfInput').value = '';

        // Eğer malzeme listesi görünüyorsa hesaplanan değerleri güncelle
        guncelHesaplamaYap();

        // Başarı mesajı
        showToast('Sarf giriş yapıldı: +' + sarfMiktar, 'success');
    }

    // Sarf çıkış fonksiyonu
    function sarfCikis() {
        var sarfMiktar = parseFloat(document.getElementById('sarfInput').value);
        if (!sarfMiktar || sarfMiktar <= 0) {
            alert('Lütfen geçerli bir sarf miktarı girin.');
            return;
        }

        if (currentPlanlananMiktar - sarfMiktar < 0) {
            alert('Sarf çıkış miktarı planlanan miktardan fazla olamaz.');
            return;
        }

        currentPlanlananMiktar -= sarfMiktar;
        document.getElementById('secili-miktar').textContent = currentPlanlananMiktar;
        document.getElementById('sarfInput').value = '';

        // Eğer malzeme listesi görünüyorsa hesaplanan değerleri güncelle
        guncelHesaplamaYap();

        // Başarı mesajı
        showToast('Sarf çıkış yapıldı: -' + sarfMiktar, 'warning');
    }

    // Toast mesajı göster
    function showToast(message, type) {
        // Basit bir toast implementasyonu
        var toast = document.createElement('div');
        toast.className = `alert alert-${type} position-fixed top-0 end-0 m-3`;
        toast.style.zIndex = '9999';
        toast.style.minWidth = '300px';
        toast.innerHTML = message + '<button type="button" class="btn-close float-end" onclick="this.parentElement.remove()"></button>';
        document.body.appendChild(toast);

        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 3000);
    }

    // Malzeme listesini getir
    function malzemeListesiniGetir() {
        document.getElementById('malzeme-container').style.display = 'block';
        document.getElementById('loading').style.display = 'block';
        document.getElementById('malzeme-tablo-container').style.display = 'none';
        document.getElementById('error-msg').style.display = 'none';
        document.getElementById('kaydet-container').style.display = 'none';

        fetch('@Url.Action("GetMalzemePlanlama", "Fatura")?isEmriKodu=' + encodeURIComponent(currentIsEmri))
            .then(response => response.json())
            .then(data => {
                document.getElementById('loading').style.display = 'none';

                if (data.success && data.data.length > 0) {
                    malzemeListesi = data.data;
                    malzemeTablosuOlustur(data.data);
                    document.getElementById('malzeme-tablo-container').style.display = 'block';
                    document.getElementById('kaydet-container').style.display = 'block';
                } else {
                    document.getElementById('error-msg').textContent = 'Bu iş emri için malzeme planlaması bulunamadı.';
                    document.getElementById('error-msg').style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Hata:', error);
                document.getElementById('loading').style.display = 'none';
                document.getElementById('error-msg').textContent = 'Malzeme listesi yüklenirken hata oluştu.';
                document.getElementById('error-msg').style.display = 'block';
            });
    }

    // Malzeme tablosu oluştur
    function malzemeTablosuOlustur(malzemeler) {
        var tbody = document.getElementById('malzeme-tbody');
        tbody.innerHTML = '';

        malzemeler.forEach(function(malzeme, index) {
            var row = tbody.insertRow();

            row.innerHTML = `
                <td><strong>${malzeme.stokKodu}</strong></td>
                <td>${malzeme.stokAdi}</td>
                <td class="text-center">${malzeme.birimAdi}</td>
                <td class="text-end">${malzeme.planlananMiktar.toFixed(2)}</td>
                <td class="text-end">${malzeme.tuketilenMiktar.toFixed(2)}</td>
                <td class="text-end"><strong>${malzeme.kalanMiktar.toFixed(2)}</strong></td>
                <td class="text-end" style="background-color: #f8f9fa;">
                    <span class="hesaplanan-miktar" data-stok="${malzeme.stokKodu}">-</span>
                </td>
                <td>
                    <input type="number" class="form-control tuketim-input" data-stok="${malzeme.stokKodu}"
                           data-planlanan="${malzeme.planlananMiktar}"
                           min="0" max="${malzeme.kalanMiktar}" step="0.01"
                           onchange="tuketimMiktarKontrol(this)"
                           style="width: 120px;">
                </td>
                <td>
                    <span class="durum-badge" data-stok="${malzeme.stokKodu}"></span>
                </td>
            `;
        });
    }

    // Tüketim miktar kontrolü
    function tuketimMiktarKontrol(input) {
        var miktar = parseFloat(input.value) || 0;
        var stokKodu = input.getAttribute('data-stok');
        var planlananMiktar = parseFloat(input.getAttribute('data-planlanan'));
        var maxMiktar = parseFloat(input.getAttribute('max'));
        var durumBadge = document.querySelector(`[data-stok="${stokKodu}"].durum-badge`);

        // Hesaplanan miktar varsa onu kullan, yoksa planlanan miktarı kullan
        var hesaplananSpan = document.querySelector(`[data-stok="${stokKodu}"].hesaplanan-miktar`);
        var referansMiktar = planlananMiktar;
        if (hesaplananSpan && hesaplananSpan.textContent !== '-') {
            referansMiktar = parseFloat(hesaplananSpan.textContent);
        }

        // %10 tolerans hesapla
        var minTolerans = referansMiktar * 0.9;
        var maxTolerans = referansMiktar * 1.1;

        if (miktar > maxMiktar) {
            input.classList.add('is-invalid');
            durumBadge.innerHTML = '<span class="badge bg-danger">Kalan miktarı aşıyor</span>';
        } else if (miktar > 0 && (miktar < minTolerans || miktar > maxTolerans)) {
            input.classList.add('is-warning');
            input.classList.remove('is-invalid', 'is-valid');
            durumBadge.innerHTML = '<span class="badge bg-warning">%10 tolerans dışında</span>';
        } else if (miktar > 0) {
            input.classList.add('is-valid');
            input.classList.remove('is-invalid', 'is-warning');
            durumBadge.innerHTML = '<span class="badge bg-success">Uygun</span>';
        } else {
            input.classList.remove('is-invalid', 'is-warning', 'is-valid');
            durumBadge.innerHTML = '';
        }
    }

    // Hesapla fonksiyonu
    function hesapla() {
        var hedefMiktar = parseFloat(document.getElementById('hesaplaInput').value);

        if (!hedefMiktar || hedefMiktar <= 0) {
            alert('Lütfen geçerli bir üretim miktarı girin.');
            return;
        }

        // Güncel planlanan miktar ile oran hesapla
        var oran = hedefMiktar / currentPlanlananMiktar;

        malzemeListesi.forEach(function(malzeme) {
            var hesaplananMiktar = malzeme.planlananMiktar * oran;
            var hesaplananSpan = document.querySelector(`[data-stok="${malzeme.stokKodu}"].hesaplanan-miktar`);
            var tuketimInput = document.querySelector(`[data-stok="${malzeme.stokKodu}"].tuketim-input`);

            if (hesaplananSpan) {
                hesaplananSpan.textContent = hesaplananMiktar.toFixed(2);
            }

            if (tuketimInput) {
                tuketimInput.value = hesaplananMiktar.toFixed(2);
                tuketimMiktarKontrol(tuketimInput);
            }
        });
    }

    // Güncel hesaplama (sarf işlemlerinden sonra)
    function guncelHesaplamaYap() {
        var hedefMiktar = parseFloat(document.getElementById('hesaplaInput').value);
        if (hedefMiktar && hedefMiktar > 0) {
            hesapla(); // Mevcut hesaplama fonksiyonunu çağır
        }
    }

    // Temizle fonksiyonu
    function temizle() {
        document.getElementById('hesaplaInput').value = '';

        // Hesaplanan miktarları temizle
        var hesaplananSpanlar = document.querySelectorAll('.hesaplanan-miktar');
        hesaplananSpanlar.forEach(function(span) {
            span.textContent = '-';
        });

        // Tüketim inputlarını temizle
        var tuketimInputlar = document.querySelectorAll('.tuketim-input');
        tuketimInputlar.forEach(function(input) {
            input.value = '';
            input.classList.remove('is-invalid', 'is-warning', 'is-valid');
        });

        // Durum badge'lerini temizle
        var durumBadges = document.querySelectorAll('.durum-badge');
        durumBadges.forEach(function(badge) {
            badge.innerHTML = '';
        });
    }

    // Tüketim kaydet
    function tuketimKaydet() {
        var tuketimListesi = [];
        var inputs = document.querySelectorAll('.tuketim-input');

        inputs.forEach(function(input) {
            var miktar = parseFloat(input.value) || 0;
            var stokKodu = input.getAttribute('data-stok');

            if (miktar > 0) {
                tuketimListesi.push({
                    StokKodu: stokKodu,
                    Miktar: miktar
                });
            }
        });

        if (tuketimListesi.length === 0) {
            alert('Tüketilecek malzeme seçilmedi. Lütfen miktar girin.');
            return;
        }

        // Geçersiz girişleri kontrol et
        var gecersizInputlar = document.querySelectorAll('.tuketim-input.is-invalid');
        if (gecersizInputlar.length > 0) {
            alert('Kalan miktarı aşan girişler var. Lütfen kontrol edin.');
            return;
        }

        if (!confirm(`${tuketimListesi.length} adet malzeme tüketilecek. İş Emri: ${currentIsEmri}\n\nDevam edilsin mi?`)) {
            return;
        }

        // Butonu devre dışı bırak
        var btn = document.getElementById('kaydet-btn');
        btn.disabled = true;
        btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Kaydediliyor...';

        // FormData oluştur
        var formData = new FormData();
        formData.append('isEmriKodu', currentIsEmri);

        tuketimListesi.forEach(function(item, index) {
            formData.append(`tuketimListesi[${index}].StokKodu`, item.StokKodu);
            formData.append(`tuketimListesi[${index}].Miktar`, item.Miktar);
        });

        fetch('@Url.Action("MalzemeTuketimi", "Fatura")', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-save"></i> Tüketimi Kaydet';

            if (data.success) {
                alert('Başarılı: ' + data.message);
                // Sayfayı yenile veya formu temizle
                location.reload();
            } else {
                alert('Hata: ' + data.message);
            }
        })
        .catch(error => {
            console.error('AJAX Hata:', error);
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-save"></i> Tüketimi Kaydet';
            alert('Tüketim işlemi sırasında hata oluştu.');
        });
    }
</script>

 <style>
    .is-warning {
        border-color: #ffc107 !important;
        background-color: #fff3cd;
    }

    .card-header {
        background-color: #1f2f4a;
        color: white;
        border-bottom: 2px solid #dee2e6;
    }

    .table th {
        font-weight: 600;
        font-size: 0.9em;
    }

    .table td {
        vertical-align: middle;
    }

    .btn-lg {
        padding: 12px 30px;
        font-size: 1.1em;
    }

    .alert-info {
        border-left: 4px solid #0dcaf0;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }
</style>